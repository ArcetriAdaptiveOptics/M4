{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7c3fe191-9cdc-41b0-a02a-4171f46ce262",
   "metadata": {},
   "source": [
    "*Summary*\n",
    "*  Load intamt data\n",
    "*  Load Optical system sensitivity matrix\n",
    "*  Perform standard SVD\n",
    "*  Perform weighted SVD with weight 1\n",
    "*  Compute sensitivity matrix using Negro84\n",
    "*  Perform weighted SVD with weight from Negro84"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD:scripts/misc/WeightedSVD.ipynb
   "execution_count": 5,
=======
   "execution_count": 1,
>>>>>>> 24deddea10fae055c35e013499280e042d5dba17:scripts/notebooks/WeightedSVD.ipynb
   "id": "71108f04-6dfc-4236-9c45-2f7a5af51c93",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD:scripts/misc/WeightedSVD.ipynb
      "Using the Python console for data analysis.\n",
      "Base data path is: /mnt/m4storage/Data/\n",
      "\n",
      "           |X|_____ _____|X|\n",
      "           |X|           |X|\n",
      "           |X|_____--___<|X|\n",
      "           |X|    |\\  /| |X|\n",
      "     __    |X|    |_\\/_| |X|\n",
      "    |  |   |X|    | /\\ | |X|\n",
      "    |  |   |X|    |/  \\| |X|\n",
      " ___|__|___|X|____ ---- _|X|_____\n",
      "Filename: /mnt/m4storage/Data/M4Data/OPTData/AlignmentCalibration/20240521_120211/InteractionMatrix.fits\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU       6   (5, 5)   float64   \n",
      "scaled 1e9 loaded intmat\n",
      "[[  -491.098   -162.284   1491.355    280.964 -10335.11 ]\n",
      " [  3519.306  -1084.129    525.068  10329.453    201.031]\n",
      " [ -4179.16     -25.826    -21.097    -12.504     -6.131]\n",
      " [    -7.548   -419.954     -2.139     -1.148     -2.245]\n",
      " [     6.315     -0.914    421.013     -4.622      7.254]]\n",
      "Filename: /mnt/m4storage/Data/M4Data/OPTData/AlignmentCalibration/20240521_120211/CMat.fits\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU       6   (5, 5)   float64   \n",
      "[[   0.7    0.     0.     0.     0. ]\n",
      " [   0.   100.     0.     0.     0. ]\n",
      " [   0.     0.   100.     0.     0. ]\n",
      " [   0.  -205.     0.     6.     0. ]\n",
      " [   0.     0.  -205.     0.     6. ]]\n",
      "scaled 1e9 intmat projected to orthognormal commands\n",
      "[[ -701.568    94.373 -3516.249    46.827 -1722.518]\n",
      " [ 5027.58   3518.389    73.936  1721.576    33.505]\n",
      " [-5970.229    -4.53     -2.306    -2.084    -1.022]\n",
      " [  -10.782    -4.592    -0.788    -0.191    -0.374]\n",
      " [    9.022    -1.588     6.689    -0.77      1.209]]\n",
      "Filename: /mnt/m4storage/Data/M4Data/OPTData/AlignmentCalibration/20240521_120211/CommandAmplitude.fits\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU       5   (5,)   float64   \n",
      "[1. 1. 1. 1. 1.]\n"
=======
      "c:\\Users\\marco\\Documents\\work\\python\\lib\\M4\\m4\\configuration\\start_onlydata.py:17: SyntaxWarning: invalid escape sequence '\\ '\n",
      "  print('           |X|    |\\  /| |X|')\n",
      "c:\\Users\\marco\\Documents\\work\\python\\lib\\M4\\m4\\configuration\\start_onlydata.py:18: SyntaxWarning: invalid escape sequence '\\/'\n",
      "  print('     __    |X|    |_\\/_| |X|')\n",
      "c:\\Users\\marco\\Documents\\work\\python\\lib\\M4\\m4\\configuration\\start_onlydata.py:19: SyntaxWarning: invalid escape sequence '\\ '\n",
      "  print('    |  |   |X|    | /\\ | |X|')\n",
      "c:\\Users\\marco\\Documents\\work\\python\\lib\\M4\\m4\\configuration\\start_onlydata.py:20: SyntaxWarning: invalid escape sequence '\\|'\n",
      "  print('    |  |   |X|    |/  \\| |X|')\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'PYOTTCONF'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 14\u001b[0m\n\u001b[0;32m     11\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mnumpy\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mnp\u001b[39;00m\n\u001b[0;32m     12\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mmatplotlib\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpyplot\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mplt\u001b[39;00m\n\u001b[1;32m---> 14\u001b[0m start_onlydata\u001b[38;5;241m.\u001b[39mcreate_conf_paths(\u001b[43mos\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43menviron\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mPYOTTCONF\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m)\n\u001b[0;32m     17\u001b[0m IMfile\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m/mnt/backup/Archeopterix_20230517/Data/M4Data/OPTData/AlignmentCalibration/20231027_131458/InteractionMatrix.fits\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m     18\u001b[0m cmfile\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m/mnt/backup/Archeopterix_20230517/Data/M4Data/OPTData/AlignmentCalibration/20231027_131458/CMat.fits\u001b[39m\u001b[38;5;124m\"\u001b[39m\n",
      "File \u001b[1;32m<frozen os>:685\u001b[0m, in \u001b[0;36m__getitem__\u001b[1;34m(self, key)\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'PYOTTCONF'"
>>>>>>> 24deddea10fae055c35e013499280e042d5dba17:scripts/notebooks/WeightedSVD.ipynb
     ]
    }
   ],
   "source": [
    "#initialize OTT simulator\n",
    "#from m4.mini_OTT import timehistory as th\n",
    "\n",
    "from m4.configuration import start_onlydata\n",
    "import os\n",
    "\n",
    "\n",
    "#laod liraries and data\n",
    "from arte.utils.zernike_projection_on_subaperture import ZernikeProjectionOnSubaperture\n",
    "from astropy.io import fits\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "start_onlydata.create_conf_paths(os.environ['PYOTTCONF'])\n",
    "\n",
    "\n",
    "IMfile=\"/mnt/m4storage/Data/M4Data/OPTData/AlignmentCalibration/20231027_131458/InteractionMatrix.fits\"\n",
    "cmfile=\"/mnt/m4storage/Data/M4Data/OPTData/AlignmentCalibration/20231027_131458/CMat.fits\"\n",
    "ampfile=\"/mnt/m4storage/Data/M4Data/OPTData/AlignmentCalibration/20231027_131458/CommandAmplitude.fits\"\n",
    "IMfile=\"/mnt/m4storage/Data/M4Data/OPTData/AlignmentCalibration/20240521_120211/InteractionMatrix.fits\"\n",
    "cmfile=\"/mnt/m4storage/Data/M4Data/OPTData/AlignmentCalibration/20240521_120211/CMat.fits\"\n",
    "ampfile=\"/mnt/m4storage/Data/M4Data/OPTData/AlignmentCalibration/20240521_120211/CommandAmplitude.fits\"\n",
    "hdul = fits.open(IMfile)\n",
    "hdul.info()\n",
    "IMat_loaded=hdul[0].data.copy()\n",
    "print(\"scaled 1e9 loaded intmat\")\n",
    "with np.printoptions(precision=3, suppress=True):\n",
    "    print(IMat_loaded*1e9)\n",
    "hdul.close()\n",
    "\n",
    "hdul = fits.open(cmfile)\n",
    "hdul.info()\n",
    "cmat=hdul[0].data.copy()\n",
    "print(cmat)\n",
    "hdul.close()\n",
    "IMat = IMat_loaded @ np.linalg.pinv(cmat)\n",
    "#IMat = IMat_loaded.copy() #test purpose\n",
    "print(\"scaled 1e9 intmat projected to orthognormal commands\")\n",
    "with np.printoptions(precision=3, suppress=True):\n",
    "    print(IMat*1e9)\n",
    "\n",
    "\n",
    "hdul = fits.open(ampfile)\n",
    "hdul.info()\n",
    "amp=hdul[0].data.copy()\n",
    "print(amp)\n",
    "hdul.close()\n"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD:scripts/misc/WeightedSVD.ipynb
   "execution_count": 6,
=======
   "execution_count": null,
>>>>>>> 24deddea10fae055c35e013499280e042d5dba17:scripts/notebooks/WeightedSVD.ipynb
   "id": "6bfaffca-7168-475b-a486-212af19e3a74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Negro84 sensitivity matrix small pupil coeffs (rows) and large pupil coeffs (columns)\n",
      "[[ 0.429  0.     0.     0.     0.     0.     0.     0.     0.     0.   ]\n",
      " [ 0.     0.429  0.     0.     0.     0.     0.     0.     0.     0.   ]\n",
      " [ 0.318  0.     0.184  0.     0.     0.     0.     0.     0.     0.   ]\n",
      " [ 0.     0.225  0.     0.184  0.     0.     0.     0.     0.     0.   ]\n",
      " [ 0.225 -0.     0.     0.     0.184  0.     0.     0.     0.     0.   ]\n",
      " [ 0.    -0.906  0.     0.136 -0.     0.079  0.     0.     0.     0.   ]\n",
      " [-0.739  0.     0.193  0.     0.136  0.     0.079  0.     0.     0.   ]\n",
      " [ 0.     0.083  0.     0.136  0.     0.     0.     0.079  0.     0.   ]\n",
      " [ 0.083 -0.     0.    -0.     0.136  0.     0.     0.     0.079  0.   ]\n",
      " [-0.817 -0.    -0.45   0.     0.092  0.     0.107  0.     0.     0.034]]\n",
      "Negro84 sensitivity matrix large pupil coeffs (rows) and small pupil coeffs (columns)\n",
      "[[   2.3   -0.    -0.    -0.    -0.    -0.    -0.    -0.    -0.    -0. ]\n",
      " [  -0.     2.3   -0.    -0.    -0.    -0.    -0.    -0.    -0.    -0. ]\n",
      " [  -4.     0.     5.4    0.     0.     0.    -0.     0.     0.     0. ]\n",
      " [   0.    -2.9    0.     5.4    0.     0.     0.     0.     0.     0. ]\n",
      " [  -2.9    0.     0.     0.     5.4    0.     0.     0.     0.    -0. ]\n",
      " [   0.    31.8    0.    -9.4    0.    12.7    0.     0.     0.     0. ]\n",
      " [  36.8    0.   -13.3    0.    -9.4    0.    12.7    0.     0.    -0. ]\n",
      " [   0.     2.5    0.    -9.4    0.     0.     0.    12.7    0.     0. ]\n",
      " [   2.5    0.     0.     0.    -9.4    0.    -0.     0.    12.7    0. ]\n",
      " [-105.8    0.   114.8    0.    14.9    0.   -40.2    0.     0.    29.6]]\n"
     ]
    }
   ],
   "source": [
    "#Simulate M4 case sub-pupil\n",
    "pupilRadiusInMeter = 0.7\n",
    "subapsRadiusInMeter = 0.3\n",
    "subapOffAxisRadiusInMeter = 0.15\n",
    "subapOffAxisAzimuthInDegrees = 0\n",
    "Zproj = ZernikeProjectionOnSubaperture(pupilRadiusInMeter,subapsRadiusInMeter,subapOffAxisRadiusInMeter,subapOffAxisAzimuthInDegrees)\n",
    "S = Zproj.get_projection_matrix()\n",
    "print(\"Negro84 sensitivity matrix small pupil coeffs (rows) and large pupil coeffs (columns)\")\n",
    "with np.printoptions(precision=3, suppress=True):\n",
    "    print(S)\n",
    "S_inv = np.linalg.inv(S)\n",
    "print(\"Negro84 sensitivity matrix large pupil coeffs (rows) and small pupil coeffs (columns)\")\n",
    "with np.printoptions(precision=1, suppress=True):\n",
    "    print(S_inv)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD:scripts/misc/WeightedSVD.ipynb
   "execution_count": 7,
=======
   "execution_count": null,
>>>>>>> 24deddea10fae055c35e013499280e042d5dba17:scripts/notebooks/WeightedSVD.ipynb
   "id": "93fb16c8-e5eb-4e34-92ce-b14e7f89e2df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "weight matrix\n",
      "[[1372.8    0.  -512.2    0.   466.9]\n",
      " [   0.  1017.1    0.   404.1    0. ]\n",
      " [-512.2    0.   207.5    0.  -169.4]\n",
      " [   0.   404.1    0.   161.4    0. ]\n",
      " [ 466.9    0.  -169.4    0.   161.4]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'eigenvalues change ratio')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#rec mat standard way\n",
    "RMat = np.linalg.pinv(IMat)\n",
    "selection = [0,1,2,5,6]\n",
    "SMat = (S_inv[:,selection].T)[:,selection].T\n",
    "W = SMat.T @ SMat\n",
    "Uw, Dw, Vhw = np.linalg.svd(W, full_matrices=True)\n",
    "#Dw[1]=1e6\n",
    "#W = np.diag(Dw*1e6)   #only for test purpose\n",
    "print(\"weight matrix\")\n",
    "with np.printoptions(precision=1, suppress=True):\n",
    "    print(W)\n",
    "#new rec mat to test\n",
    "RMat2 = cmat @ np.linalg.inv(IMat_loaded.T @ W @ IMat_loaded) @ IMat_loaded.T @ W\n",
    "\n",
    "U, D, Vh = np.linalg.svd(RMat, full_matrices=True)\n",
    "U2, D2, Vh2 = np.linalg.svd(RMat2, full_matrices=True)\n",
    "Ui, Di, Vhi = np.linalg.svd(IMat, full_matrices=True)\n",
    "Uw, Dw, Vhw = np.linalg.svd(W, full_matrices=True)\n",
    "plt.plot(np.abs((D2-D)/D))\n",
    "plt.title(\"eigenvalues change ratio\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "883f5833-54dd-4e46-9c0e-e679c5004eed",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "242e1191-9ed8-4462-b055-d9faa4af746d",
   "metadata": {},
   "source": [
    "Marginal changes in the singular values of RMat. Why? The hypothesys is that SINCE WE HAVE ONLY Nmeas==NDOF, there is no room for weighting. Remind that the measures are \"perfect\" by themselves but each component of the measure has a dirfferent noise from the others.\n",
    "For verifying that, we add more Commands and Measures to the intmat."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD:scripts/misc/WeightedSVD.ipynb
   "execution_count": 8,
=======
   "execution_count": null,
>>>>>>> 24deddea10fae055c35e013499280e042d5dba17:scripts/notebooks/WeightedSVD.ipynb
   "id": "3508350d-30e5-4795-97d9-5ecd58aa8c10",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reding Frame_0000.fits\n",
      "Reding Frame_0001.fits\n",
      "Reding Frame_0002.fits\n",
      "Reding Frame_0003.fits\n",
      "Reding Frame_0004.fits\n",
      "Reding Frame_0005.fits\n",
      "Reding Frame_0006.fits\n",
      "Reding Frame_0007.fits\n",
      "Reding Frame_0008.fits\n",
      "Reding Frame_0009.fits\n",
      "Reding Frame_0010.fits\n",
      "Reding Frame_0011.fits\n",
      "Reding Frame_0012.fits\n",
      "Reding Frame_0013.fits\n",
      "Reding Frame_0014.fits\n",
      "Reding Frame_0015.fits\n",
      "Reding Frame_0016.fits\n",
      "Reding Frame_0017.fits\n",
      "Reding Frame_0018.fits\n",
      "Reding Frame_0019.fits\n",
      "[[ 6.01188349e-08 -1.02475591e-06  5.50050363e-07 -2.47210436e-07\n",
      "   8.11135744e-07 -4.77828679e-07  2.51107786e-07  2.59576249e-07\n",
      "  -1.86690269e-06  2.44522946e-06  3.97898420e-08 -1.02430522e-06\n",
      "   6.54464474e-07 -1.62528714e-07  8.17543657e-07 -3.58248284e-07\n",
      "   1.21923839e-07  2.03096110e-07 -1.86421638e-06  2.40050830e-06]\n",
      " [ 9.78620264e-07 -1.34438050e-06  2.51629557e-08 -5.94630936e-07\n",
      "  -4.26812005e-07 -5.38094141e-07  1.83909381e-06 -2.52866101e-06\n",
      "  -2.79117574e-07 -4.37033432e-07  1.09259709e-06 -1.28697432e-06\n",
      "   4.84372542e-08 -5.88126129e-07 -3.41437834e-07 -3.81565270e-07\n",
      "   1.83744271e-06 -2.49592031e-06 -2.63868116e-07 -4.39934635e-07]\n",
      " [-7.19830465e-07  6.98377373e-07 -1.66305609e-08 -6.14612726e-09\n",
      "  -4.74133553e-09 -1.31046438e-08 -1.02276600e-08 -1.09977589e-08\n",
      "  -1.01266395e-08 -1.06629218e-08 -7.19087118e-07  6.99440356e-07\n",
      "  -1.38128568e-08 -4.97929400e-09 -9.51388727e-09 -1.45132599e-08\n",
      "  -1.15577666e-08 -1.17363002e-08 -8.64936411e-09 -9.60796519e-09]\n",
      " [ 6.51840508e-09  9.47581355e-09 -2.13014466e-08  3.75674677e-08\n",
      "   7.75536827e-09  7.82793794e-09  7.69290748e-09  9.28360144e-09\n",
      "   7.82401144e-09  8.60586184e-09  6.37096539e-09  7.99693586e-09\n",
      "  -2.17555787e-08  3.73827082e-08  7.54317374e-09  7.84383641e-09\n",
      "   7.22733309e-09  7.93428745e-09  7.34394435e-09  8.80950006e-09]\n",
      " [-9.29952029e-11  3.80469628e-10 -4.97544046e-10  6.36621271e-10\n",
      "   2.95745439e-08 -3.08354941e-08 -1.56437333e-09 -3.36071505e-13\n",
      "  -1.07077111e-12 -4.07302610e-10 -9.07200853e-11  4.58984559e-10\n",
      "  -4.74416144e-10 -2.37093876e-10  2.97991359e-08 -2.99564798e-08\n",
      "  -8.55694480e-10 -8.01452257e-10 -4.93835231e-10  1.44797733e-09]]\n",
      "weight matrix\n",
      "[[1372.8    0.  -512.2    0.   466.9]\n",
      " [   0.  1017.1    0.   404.1    0. ]\n",
      " [-512.2    0.   207.5    0.  -169.4]\n",
      " [   0.   404.1    0.   161.4    0. ]\n",
      " [ 466.9    0.  -169.4    0.   161.4]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'eigenvalues change ratio')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "#load libraries\n",
    "from m4.utils.optical_calibration import OpticalCalibration\n",
    "from m4.ground import read_data\n",
    "import numpy as np\n",
    "from m4.ground import zernike as zern\n",
    "from m4.ground import geo as geo\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "oo = OpticalCalibration.loadCalibrationObjectFromFits('20231027_131458')\n",
    "meas = oo.getCube()\n",
    "cmd  = oo.getCommandMatrix()\n",
    "fullCmd = oo.getFullCommandMatrix()\n",
    "fullMeas = oo.getFullCube()\n",
    "\n",
    "CMat = fullCmd.copy()\n",
    "IMat = oo.getFullLocalInteractionMatrix()  #@ np.linalg.pinv(CMat)\n",
    " \n",
    "print(IMat)\n",
    "\n",
    "#rec mat standard way\n",
    "RMat = CMat @ np.linalg.pinv(IMat)\n",
    "selection = [0,1,2,5,6]\n",
    "SMat = (S_inv[:,selection].T)[:,selection].T\n",
    "W = SMat.T @ SMat\n",
    "Uw, Dw, Vhw = np.linalg.svd(W, full_matrices=True)\n",
    "#Dw[1]=1e6\n",
    "#W = np.diag(Dw)   #only for test purpose\n",
    "print(\"weight matrix\")\n",
    "with np.printoptions(precision=1, suppress=True):\n",
    "    print(W)\n",
    "#new rec mat to test\n",
    "RMat2 = CMat @ np.linalg.inv(IMat.T @ W @ IMat) @ IMat.T @ W\n",
    "\n",
    "U, D, Vh = np.linalg.svd(RMat, full_matrices=True)\n",
    "U2, D2, Vh2 = np.linalg.svd(RMat2, full_matrices=True)\n",
    "Ui, Di, Vhi = np.linalg.svd(IMat, full_matrices=True)\n",
    "Uw, Dw, Vhw = np.linalg.svd(W, full_matrices=True)\n",
    "plt.plot(np.abs((D2-D)/D))\n",
    "plt.title(\"eigenvalues change ratio\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD:scripts/misc/WeightedSVD.ipynb
   "execution_count": 9,
=======
   "execution_count": null,
>>>>>>> 24deddea10fae055c35e013499280e042d5dba17:scripts/notebooks/WeightedSVD.ipynb
   "id": "4635e66e-bc72-4f05-848d-fdc5d611cd94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x737fcb4f7f70>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(np.abs ((RMat-RMat2)/RMat))\n",
    "plt.colorbar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61d97da5-95f2-4b36-bc2e-c13a1bee47cd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
