• Acquisizione ed analisi delle Funzioni d'influenza


	- Acquisizione
	
	  PROCEDIMENTO:
	  from m4.utils import create_device
      device = create_device.myDevice("segment") 		#or "m4"
      from m4.influence_functions_maker import IFFunctionsMaker
      IFF = IFFunctionsMaker(device) 
      tt = IFF.acq_IFFunctions(modesVectorFitsFileName, nPushPull, amplitudeFitsFileName,
      							 cmdMatrixFitsFileName, shuffle=None) 
      							 
      RISULTATI:
      * .../IFFunctions/tt contiene il file 'info.fits' con i dati utilizzati per creare le iff 
      	e gli interferogrammi acquisiti
      * .../CommandHistory/tt contiene il file 'info.fits' in cui sono salvati i dati con cui è stata 
      	creata la matrice con la storia dei comandi
      	
      	
     - Analisi
     
       PROCEDIMENTO:
       from m4.analyzer_iffunctions import AnalyzerIFF 
       fileName = os.path.join(".../IFFunctions", tt)
  	   an = AnalyzerIFF.loadInfoFromTtFolder(fileName)
  	   cube = an.createCube(tiptiltDetrend=None, phaseAmbiguity=None)
  	   an.saveCubeAsFits(cubeName)	#'Cube.fits' or 'CubeTTD.fits' etc..
  	   ( intMat= an.getInteractionMatrix()	rec= an.getReconstructor() 	)
  	   
  	   RISULTATI:
  	   * .../IFFunctions/tt contiene il cubo con le funzioni di influenze ridotte nel modo richiesto
  	   * an è definito tramite le IFF scelte e può essere usato per lo spianemento
  	   
  	   
  	 - Spianamento
  	 
  	   PROCEDIMENTO:
  	   
  	   RISULTATI:
  	   
  	   
  	   
• Calibrazione e allineamento delle ottiche 

	
	- Allineamento dell'OTT (PAR + RM)
	
	  PROCEDIMENTO:
	  from m4.alignment import Alignment 
	  a = Alignment()
	  tt = a.ott_calibration(commandAmpVector, nPushPull, maskIndex)
	  cmd = a.ott_alignment(tt)
	  
	  RISULTATI:
	  
	  
	- Allinemaneto di M4
	
	  PROCEDIMENTO:
	  from m4.alignment import Alignment 
	  a = Alignment()
	  tt, zCoefComa, comaSurface = a.m4_calibration(...)
      cmd = a.m4_alignement(zCoefComa)
	  
	  RISULTATI:
	  
	  
	  
	  
	
	
	